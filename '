package main

import (
	"context"
	"flag"
	"fmt"
	"os"
	"weatherapiCLI/apis/weatherapi"
	"weatherapiCLI/config"
)

type CommandLineOptions struct {
	NumberOfDays int
	Location     string
	Forecast     bool
}

func parseCommandLineArguments() *CommandLineOptions {
	numberOfDays := flag.Int("days", 1, "Number of days for the forecast")
	location := flag.String("location", "auto:ip", "Location for weather data(default is location via ip)")
	forecast := flag.Bool("forecast", false, "Boolean that represents a request for forecast")
	flag.Parse()
	return &CommandLineOptions{
		NumberOfDays: *numberOfDays,
		Location:     *location,
		Forecast:     *forecast,
	}
}

func main() {
	options := parseCommandLineArguments()
	configuration, err := config.LoadConfiguration()
    if options.Forecast==true{

    }
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	client := weatherapi.NewWeatherClient(os.Getenv("MY_WEATHER_API_KEY"))
	data, err := client.GetForecast(context.Background(),
		&weatherapi.ForecastOptions{NumberOfDays: 1, Location: configuration.Location})
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	fmt.Printf("In %s, %s, %s\n", data.Location.Name, data.Location.Region, data.Location.Country)
	fmt.Printf("%s with temperature of %.1f Celsius\n", data.Currrent.Condition.ConditionText, data.Currrent.Temperature_Celsius)
	fmt.Printf("At %s condition is: %s with a temperature of: %.1f\n",
		data.Forecast.ForecastDays[0].Hours[19].DateAndTime,
		data.Forecast.ForecastDays[0].Hours[19].Condition.ConditionText,
		data.Forecast.ForecastDays[0].Hours[19].Temperature_Celsius)
}
